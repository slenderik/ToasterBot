# noinspection PyUnresolvedReferences
import disnake
from disnake import Embed, SelectOption
from disnake.ext import commands
from disnake.ui import Button


class GuideMenu(disnake.ui.View):
    def __init__(self, embeds: list[disnake.Embed]):
        super().__init__(timeout=None)
        self.embeds = embeds
        self.page = 0

        for i, embed in enumerate(self.embeds):
            embed.set_footer(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i + 1} –∏–∑ {len(self.embeds)}")

    @disnake.ui.button(emoji="<:back:990589488092807288>", style=disnake.ButtonStyle.secondary)
    async def prev_page(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        self.page -= 1
        embed = self.embeds[self.page]

        self.next_page.disabled = False
        if self.page == 0:
            self.prev_page.disabled = True
            self.add_item(disnake.ui.Button(label="–ó–∞–π—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä", url="https://breadixpe.ru/play"))
        await inter.response.edit_message(embed=embed, view=self)

    @disnake.ui.button(emoji="<:next:990587920522031104>", style=disnake.ButtonStyle.secondary)
    async def next_page(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        self.page += 1
        embed = self.embeds[self.page]

        self.prev_page.disabled = False
        if self.page == len(self.embeds) - 1:
            self.next_page.disabled = True
        await inter.response.edit_message(embed=embed, view=self)


class Dropdown(disnake.ui.Select):
    def __init__(self):
        super().__init__(
            placeholder="–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å –≥–µ–Ω–¥–µ—Ä–∞",
            max_values=1,
            options=[
                disnake.SelectOption(label="–ñ–µ–Ω—Å–∫–∏–π", emoji=":female_sign:", value="0"),
                disnake.SelectOption(label="–ú—É–∂—Å–∫–æ–π", emoji=":male_sign:", value="1"),
            ]
        )

    async def callback(self, inter: disnake.MessageInteraction):
        roles_id = [992760053503373442, 992760385167958046]  # –ø–µ—Ä–≤–∞—è - –∂–µ–Ω—Å, –≤—Ç–æ—Ä–∞—è - –º—É–∂
        role = inter.guild.get_roles(roles_id[self.values[0]])
        await inter.user.add_roles(role)
        await inter.response.defer()


async def delete_roles(member: disnake.Member, roles: list):
    for role in roles:
        if role in member.roles:
            await member.delete_role()

        continue


class NotificationsSelect(disnake.ui.Select):
    def __init__(self):
        options = [
            SelectOption(
                label="SkyWars ‚Ññ1",
                description="–ï—Å–ª–∏ —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Ç—É—Ç –∏–≥—Ä–∞—Ç—å",
                emoji="üü¶"
            ),
        ]

        super().__init__(
            placeholder="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!",
            custom_id="roles:notifications",
            max_values=1,
            row=1,
            options=options
        )

    async def callback(self, inter: disnake.MessageInteraction):
        ...


class CustomizeRoles(disnake.ui.View):

    def __init__(self, main_embed):
        super().__init__(timeout=None)
        self.main_embed = main_embed
        self.add_item(SelectServer())

    @disnake.ui.button(label="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", style=disnake.ButtonStyle.blurple, custom_id="roles:notifications")
    async def notifications(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.original_message_edit(view=None, ephemeral=True)

    @disnake.ui.button(label="–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", style=disnake.ButtonStyle.blurple, custom_id="roles:devices")
    async def devices(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        ...

    @disnake.ui.button(label="–õ—é–±–∏–º—ã–µ —Ä–µ–∂–∏–º—ã", style=disnake.ButtonStyle.blurple, custom_id="roles:game_modes")
    async def game_modes(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        ...

    @disnake.ui.button(label="–ì–µ–Ω–¥–µ—Ä", style=disnake.ButtonStyle.blurple, custom_id="roles:gender")
    async def gender(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        ...


# class InfoView(disnake.ui.View):
#     def __init__(self):
#         super().__init__(timeout=None)
#
#     @disnake.ui.button(emoji="<:rules:990587924615684107>", label="–ü—Ä–∞–≤–∏–ª–∞",
#                        style=disnake.ButtonStyle.blurple, custom_id="info:show_rules")
#     async def show_rules(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
#         view = disnake.ui.View()
#         view.add_item(
#             disnake.ui.Button(
#                 emoji="<:icon_clyde_white:992417678033690694>",
#                 label="–ü—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞",
#                 style=disnake.ButtonStyle.url,
#                 url="https://discord.com/guidelines"
#             )
#         )
#         view.add_item(
#             disnake.ui.Button(
#                 emoji="<:icon_clyde_white:992417678033690694>",
#                 label="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ",
#                 style=disnake.ButtonStyle.url,
#                 url="https://discord.com/terms"
#             )
#         )
#         rules_embed = disnake.Embed(
#             title="–•–µ–π, –≥–æ–ª–æ—Å, –¥–æ–±–∞–≤–∏–º —Å—É–¥–∞ –ø—Ä–∞–≤–∏–ª–∞?",
#             description="–ù–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –≤—ë–¥–µ—Ç –∫ –Ω–∞–∫–∞–∑–∞–Ω–∏—é. –ù–∞–∫–∞–∑–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. \n ‚Ä¢ –ù–∞–∫–∞–∑–∞–Ω–∏—è "
#                         "–º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏. –ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è —Å—Ç—Ä–æ–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ. "
#         )
#         await inter.response.send_message(embed=rules_embed, view=view, ephemeral=True)
#
#     @disnake.ui.button(emoji="<:start:990587922996666421>", label="–ù–∞—á–∞—Ç—å",
#                        style=disnake.ButtonStyle.green, custom_id="info:start")
#     async def start(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
#         embeds = [
#             disnake.Embed(
#                 title=":video_game: –ò–≥—Ä–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä–∞",
#                 description="–î–ª—è –≤—Ö–æ–¥–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è Minecraft: Pocket Edition –≤–µ—Ä—Å–∏–∏ 1.1.X ([–Ω–∞–ø—Ä–∏–º–µ—Ä 1.1.5]("
#                             "https://www.google.ru/search?q=minecraft+PE+1.1.5)) \n–ú–æ–∂–Ω–æ —Å—ã–≥—Ä–∞—Ç—å –≤ —Ç–∞–∫–∏–µ —Ä–µ–∂–∏–º—ã –∫–∞–∫: "
#                             "SkyWars, BedWars, Murder Mystery, Duels –∏ Survival (–í—ã–∂–∏–≤–∞–Ω–∏–µ) \n**IP:** "
#                             "play.breadixpe.ru \n**Port:** 19132 "
#             ).set_image(
#                 url="https://media.discordapp.net/attachments/925435932532936714/992768683887829073/Screenshot_82.png"
#                     "?width=840&height=473"),
#             disnake.Embed(
#                 title="–†–µ—Å—É—Ä—Å—ã –ø—Ä–æ–µ–∫—Ç–∞",
#                 description=""
#             ),
#             disnake.Embed(
#                 title="–ú–µ—Ö–∞–Ω–∏–∫–∏",
#                 description="–õ–µ–≤–µ–ª–∏–Ω–≥ - –≥–æ–≤–Ω–æ, —ç–∫–æ–Ω–æ–º–∏–∫–∞ –∂–æ–ø–∞."
#             )
#         ]
#         await inter.response.send_message(embed=embeds[0], view=GuideMenu(embeds), ephemeral=True)
#
#     @disnake.ui.button(emoji="<:edit:990587921776136272> ", label="–í—ã–±—Ä–∞—Ç—å —Ä–æ–ª–∏",
#                        style=disnake.ButtonStyle.gray, custom_id="info:select_roles")
#     async def select_roles(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
#         roles_embed = Embed(
#             title=":zany_face: –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–±–µ —Ä–æ–ª–µ ",
#             description="–í—Å–µ –ª—é–¥–∏ —Ä–∞–∑–Ω—ã–µ! –ß—Ç–æ–±—ã —É–∫—Ä–∞—Å–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—Å –∏ —Ç–∏–ø –Ω–æ–≤–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã "
#                         "—Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∞—Ç—å, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–æ–ª–µ–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª–∏, "
#                         "–ø—Ä–∏–º–µ–Ω–∏–º—ã–µ –∫ –≤–∞–º. "
#         )
#         await inter.response.send_message(embed=roles_embed, view=CustomizeRoles(roles_embed), ephemeral=True)
#
#     @disnake.ui.button(emoji="<:edit:990587921776136272> ", label="–û–±—Ä–∞—Ç–∏—Ç—å—Å—è",
#                        style=disnake.ButtonStyle.gray, custom_id="info:ticket_apply")
#     async def ticket_apply(self, button: disnake.ui.Button, inter: disnake.CommandInteraction):
#         from cogs.tickets import TicketModal
#         modal = TicketModal()
#         await inter.response.send_modal(modal=modal)

cooldown_ticket = {}


class InfoCog(commands.Cog):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""

    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.information_views_added = False

    @commands.Cog.listener()
    async def on_ready(self):
        print(f"{self.bot.user} | {__name__}")
        if not self.information_views_added:
            self.information_views_added = True

    @commands.command()
    async def info(self, ctx: commands.Context):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        text = "–ú—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ BreadixWorld. \n" \
               "–ó–¥–µ—Å—å –º—ã —Ö–æ—Ç–∏–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. \n" \
               "*–û–±—â–∞–π—Ç–µ—Å—å, —Å–ª—É—à–∞–π—Ç–µ –º—É–∑—ã–∫—É, –Ω–∞–π–¥–∏—Ç–µ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞–Ω, —É–∑–Ω–∞–≤–∞–π—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏, –ø–æ–ª—É—á–∏—Ç–µ " \
               "–ø–æ–º–æ—â—å –∏ –∏–≥—Ä–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã*! –ò –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è. \n\n" \
               "–ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–º–æ–≥—É—Ç –≤–∞–º: —É–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞, –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ–±–µ —Ä–æ–ª–∏."

        info_embed = Embed(
            title=":sparkles: –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ BreadixWorld Discord!",
            description=text,
            color=None,
            colour=None
        )

        components = [
            Button(emoji="<:rules:990587924615684107>", label="–ü—Ä–∞–≤–∏–ª–∞",
                   style=disnake.ButtonStyle.blurple, custom_id="info:show_rules"),
            Button(emoji="<:start:990587922996666421>", label="–ù–∞—á–∞—Ç—å",
                   style=disnake.ButtonStyle.green, custom_id="info:start"),
            Button(emoji="<:edit:990587921776136272> ", label="–í—ã–±—Ä–∞—Ç—å —Ä–æ–ª–∏",
                   style=disnake.ButtonStyle.gray, custom_id="info:select_roles"),
            Button(emoji="<:edit:990587921776136272> ", label="–û–±—Ä–∞—Ç–∏—Ç—å—Å—è",
                   style=disnake.ButtonStyle.gray, custom_id="info:ticket_apply")
        ]
        await ctx.send(embed=info_embed, components=components)

    @commands.Cog.listener("on_button_click")
    async def voices_buttons_listener(self, inter: disnake.MessageInteraction):
        button_id = inter.component.custom_id
        if button_id.startswith("info"):
            if button_id == "info:show_rules":
                from cogs.rules import rules_texts, number_of_rules
                rules_embed = Embed(title="–ü—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤ Discord")
                for clause in range(1, number_of_rules + 1):
                    rules_embed.add_field(
                        name=f"{clause}. {rules_texts[str(clause) + '_–∑–∞–≥–æ–ª–æ–≤–æ–∫']}",
                        value=rules_texts[str(clause) + '_—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ'],
                        inline=False
                    )
                rules_embed.set_footer(text="–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –º–æ–≥—É—Ç —Ä–µ—à–∞—Ç—å—Å—è –Ω–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

                await inter.response.send_message(embed=rules_embed, ephemeral=True)

            elif button_id == "info:start":
                await inter.response.send_message("0w31023981", ephemeral=True)

            elif button_id == "info:select_roles":
                roles_embed = Embed(
                    title=":zany_face: –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–±–µ —Ä–æ–ª–∏",
                    description="–í—Å–µ –ª—é–¥–∏ —Ä–∞–∑–Ω—ã–µ! –ß—Ç–æ–±—ã —É–∫—Ä–∞—Å–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—Å –∏ —Ç–∏–ø –Ω–æ–≤–æ—Å—Ç–µ–π, "
                                "–∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∞—Ç—å, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–æ–ª–µ–π –Ω–∏–∂–µ, "
                                "—á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª–∏, –ø—Ä–∏–º–µ–Ω–∏–º—ã–µ –∫ –≤–∞–º. "
                )

                components = [
                    Button(label="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", style=disnake.ButtonStyle.blurple, custom_id="roles:notifications"),
                    Button(label="–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", style=disnake.ButtonStyle.blurple, custom_id="roles:devices"),
                    Button(label="–õ—é–±–∏–º—ã–µ —Ä–µ–∂–∏–º—ã", style=disnake.ButtonStyle.blurple, custom_id="roles:game_modes"),
                    Button(label="–ì–µ–Ω–¥–µ—Ä", style=disnake.ButtonStyle.blurple, custom_id="roles:gender"),
                ]

                await inter.response.send_message(embed=roles_embed, components=components, ephemeral=True)

            elif button_id == "info:ticket_apply":
                from extension.cooldown import cooldown_time, is_cooldown, add_cooldown
                print(inter.user.id, cooldown_ticket)
                if is_cooldown(inter.user.id, cooldown_ticket):
                    cooldown = await cooldown_time(member.id, cooldown_ticket)
                    await after.channel.send(
                        f"{inter.user.mention}, –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ—Ä–µ–∑ {cooldown} —Å–µ–∫!",
                        delete_after=cooldown
                    )
                    return

                from cogs.tickets import TicketModal
                modal = TicketModal()
                await inter.response.send_modal(modal=modal)
                print('1 ads')
                await add_cooldown(inter.user.id, cooldown_ticket, 300)
                print('2 ads')

        elif button_id.startswith("roles"):
            if button_id == "roles:notifications":
                pass

            elif button_id == "roles:devices":
                pass

            elif button_id == "roles:game_modes":
                pass

            elif button_id == "roles:gender":
                pass

        elif button_id:
            await inter.response.send_message(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π custom_id: {button_id}")
        else:
            await inter.response.send_message(f"–ü–æ–∫–∞ —á—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ –∫–∞–∫ —Ç—ã —ç—Ç–æ —Å–¥–µ–ª–∞–ª.\n–û—à–∏–±–∫–∞: {inter.component}")


def setup(bot):
    bot.add_cog(InfoCog(bot))
    print(f" + {__name__}")


def teardown(bot):
    print(f" ‚Äì {__name__}")
