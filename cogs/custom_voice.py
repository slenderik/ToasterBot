from asyncio import sleep, TimeoutError
from random import choice
from time import time

import disnake
from disnake.ext import commands
from disnake.utils import get

# —Ç—É–∫-—Ç—É–∫
# –∫ –≤–∞–º —Ö–æ—á–µ—Ç –∑–∞–π—Ç–∏ @—á–µ–ª–æ–≤–∫–µ

voice_create_id = 879387831385088020
server_id = 823820166478823462
logo_url = "https://media.discordapp.net/attachments/925973441524424716/925973455919251536/logo_bread.png?width=473" \
           "&height=473 "

custom_rooms = {}


async def is_owner(user_id: int) -> bool:
    """–í–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª–µ—Ü –ª–∏ —á–µ–ª–æ–≤–µ–∫"""
    return custom_rooms.get(user_id, None) is not None


async def in_channel(user: object) -> bool:
    """–í–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–Ω–∞–ª–µ?"""
    return user.voice is not None


async def in_owned_channel(user: object, channel: object) -> bool:
    """–í–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–≤–æ—ë–º –∫–∞–Ω–∞–ª–µ?"""
    return user.voice.channel.id == channel.id


async def channel_name(name: str) -> str:
    """–í–µ—Ä–Ω—É—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —Å —É—á—ë—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —à—Ç—É–∫."""
    if "üîû" in name:
        name = f"[üîû] {name}"
    return name


async def get_channel(guild: object, user_id: int) -> object | None:
    """–í–µ—Ä–Ω—É—Ç—å –∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞."""
    if custom_rooms.get(user_id, None) is not None:
        return get(guild.voice_channels, id=custom_rooms[user_id])
    else:
        return None


async def disable(self: object, button: disnake.ui.Button, inter: disnake.MessageInteraction):
    """–û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É."""
    # –≤–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ç–æ–º –∂–µ —Ä—è–¥—É
    for child in self.children:
        if isinstance(child, disnake.ui.Button):
            if child.row == button.row:
                child.disabled = False
    # –≤—ã–∫–ª—é—á–∞–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É
    button.disabled = True
    await inter.response.edit_message(view=self)


cooldowns = {}


async def cooldown_time(user_id: int) -> str:
    """"–í–µ—Ä–Ω—É—Ç—å –≤—Ä–µ–º—è –Ω–∞ –∫—É–ª–¥–∞—É–Ω."""
    if cooldowns.get(user_id) is not None:
        cooldown = str(cooldowns[member_id] - round(time()))
    else:
        cooldown = "0 UwU"
    return cooldown


async def is_cooldown(user_id: int) -> bool:
    """"–í–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫—É–ª–¥–∞—É–Ω–µ."""
    if cooldowns.get(user_id) is not None:
        return True
    else:
        return False


async def add_cooldown(user_id: int):
    """–î–æ–±–∞–≤–∏—Ç—å –≤ –∫—É–ª–¥–∞—É–Ω—ã –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫ —Å–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞."""
    cooldown: int = round(time())
    cooldown += 30  # –≤—Ä–µ–º—è –æ—Ç–∫–∞—Ç–∞/–∫—É–ª–¥–∞—É–Ω–∞
    cooldown = {user_id: cooldown}
    cooldowns.update(cooldown)
    await sleep(30)
    cooldowns.pop(user_id)


class SettingsView(disnake.ui.View):

    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(custom_id="voice_view:yes_profanity", emoji="üîû", label="–° –º–∞—Ç–æ–º", style=disnake.ButtonStyle.red,
                       row=2)
    async def yes_profanity(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        channel = await get_channel(inter.bot, inter.user)
        await channel.edit(name=f"[üîû] {channel.name}", reason="[–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ö–∞–Ω–∞–ª—ã] –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        await disable(self, button, inter)

    @disnake.ui.button(custom_id="voice_view:no_profanity", emoji="üîû", label="–ë–µ–∑ –º–∞—Ç–∞", style=disnake.ButtonStyle.red,
                       row=2)
    async def no_profanity(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        channel = await get_channel(inter.bot, inter.user)
        await channel.edit(name=channel.name[4:], nsfw=True, reason="[–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ö–∞–Ω–∞–ª—ã] –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        await disable(self, button, inter)

    @disnake.ui.button(custom_id="voice_view:unlock_channel", emoji="üîì", label="–û—Ç–∫—Ä—ã—Ç—å",
                       style=disnake.ButtonStyle.blurple,
                       row=3)
    async def unlock_channel(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        channel = await get_channel(inter.bot, inter.user)
        user = inter.user
        overwrites = {user: disnake.PermissionOverwrite(view_channel=True, manage_channels=True)}
        await channel.edit(overwrites=overwrites, reason="[–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ö–∞–Ω–∞–ª—ã] –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        await disable(self, button, inter)

    @disnake.ui.button(custom_id="voice_view:lock_channel", emoji="üîí", label="–ó–∞–∫—Ä—ã—Ç—å",
                       style=disnake.ButtonStyle.blurple, row=3)
    async def lock_channel(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await disable(self, button, inter)


class LimitView(disnake.ui.View):

    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(custom_id="voice_view:user_limit_two", label="2", style=disnake.ButtonStyle.blurple, row=4)
    async def user_limit_two(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await disable(self, button, inter)

    @disnake.ui.button(custom_id="voice_view:user_limit_four", label="4", style=disnake.ButtonStyle.blurple, row=4)
    async def user_limit_four(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await disable(self, button, inter)

    @disnake.ui.button(custom_id="voice_view:user_limit_five", label="5", style=disnake.ButtonStyle.blurple, row=4)
    async def user_limit_five(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await disable(self, button, inter)

    @disnake.ui.button(custom_id="voice_view:user_limit_six", label="6", style=disnake.ButtonStyle.blurple, row=4)
    async def user_limit_six(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await disable(self, button, inter)

    @disnake.ui.button(custom_id="voice_view:user_limit_ten", label="10", style=disnake.ButtonStyle.blurple, row=4)
    async def user_limit_ten(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await disable(self, button, inter)


class NameView(disnake.ui.View):

    def __init__(self):
        super().__init__(timeout=None)

    async def interaction_check(self, inter: disnake.MessageInteraction) -> bool:
        owner = await is_owner(inter.user.id)
        in_voice = await in_channel(inter.user)

        if owner and in_voice:
            channel = await get_channel(inter.guild, inter.user.id)
            if channel is not None:
                in_owned = await in_owned_channel(inter.user, channel)
                if in_owned:
                    return True
            else:
                await inter.response.send_message(
                    f"–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–≤–æ—ë–º –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–≥–æ",
                    ephemeral=True)
                return False
        elif owner and not in_voice:
            await inter.response.send_message(f"–í—ã –¥–æ–ª–∂–Ω—ã –∑–∞–π—Ç–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª.", ephemeral=True)
            return False
        elif not owner:
            await inter.response.send_message(f"–í—ã –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª.", ephemeral=True)
            return False
        """
        –í—ã –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª, –∑–∞–π–¥—è –≤ <#879387831385088020>
        –ò —É–∂–µ –Ω–∞—Ö–æ–¥—è—Å—å –≤ –Ω—ë–º, –≤—ã —Å–º–æ–∂–µ—Ç–µ  –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –ø—Ä–µ–ª–µ—Å—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É—à–∫—É.
        """

    @disnake.ui.button(label="–û–±—â–µ–Ω–∏–µ", style=disnake.ButtonStyle.green, row=0)
    async def talk(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        channel = await get_channel(inter.guild, inter.user.id)
        name = await channel_name(button.label)
        await channel.edit(name=name)
        await disable(self, button, inter)

    @disnake.ui.button(label="–ú—É–∑—ã–∫–∞", style=disnake.ButtonStyle.green, row=0)
    async def music(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        channel = await get_channel(inter.guild, inter.user.id)
        name = await channel_name(button.label)
        await channel.edit(name=name)
        await disable(self, button, inter)

    @disnake.ui.button(label="–û—Ñ—Ñ—Ç–æ–ø", style=disnake.ButtonStyle.green, row=0)
    async def offtop(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        channel = await get_channel(inter.guild, inter.user.id)
        name = await channel_name(button.label)
        await channel.edit(name=name)
        await disable(self, button, inter)

    # sw bw surv duels
    @disnake.ui.button(custom_id="name:skywars", label="SkyWars", style=disnake.ButtonStyle.blurple, row=1)
    async def skywars(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        channel = await get_channel(inter.guild, inter.user.id)
        name = await channel_name(button.label)
        await channel.edit(name=name)
        await disable(self, button, inter)
        await inter.response.send_message(view=LimitView())

    @disnake.ui.button(label="–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ", style=disnake.ButtonStyle.gray, row=2)
    async def custom_name(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.send_modal(
            title="–í–µ—Å—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
            custom_id="voice:name",
            components=[disnake.ui.TextInput(
                label="–ù–∞–∑–≤–∞–Ω–∏–µ",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–¥–µ—Å—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
                custom_id="name:custom_name",
                max_length=50,
            )],
        )
        try:
            modal_inter: disnake.ModalInteraction = await inter.bot.wait_for(
                "modal_submit",
                check=lambda i: i.custom_id == "voice:name" and i.author.id == inter.author.id,
                timeout=300
            )
        except TimeoutError:
            return

        name = await channel_name(modal_inter.text_values["name:custom_name"])
        channel = await get_channel(inter.guild, inter.user.id)
        await channel.edit(name=name)
        await modal_inter.response.defer()


class VoiceView(disnake.ui.View):

    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(custom_id="voice_view:name", label="–û–±—â–µ–Ω–∏–µ", style=disnake.ButtonStyle.green)
    async def name(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.send_message(view=NameView(), ephemeral=True)

    @disnake.ui.button(custom_id="voice_view:limit", label="–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", style=disnake.ButtonStyle.green)
    async def limit(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.response.send_message(view=LimitView(), ephemeral=True)


class VoiceCog(commands.Cog):

    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.voice_views_added = False

    @commands.Cog.listener()
    async def on_ready(self):
        if not self.voice_views_added:
            self.bot.add_view(VoiceView())
            self.bot.voice_views_added = True

        print(f"{self.bot.user} | {__name__}")

    @commands.command(name="–≥—Å")
    @commands.has_role(977974127304515614)
    async def voice_settings(self, ctx: commands.Context):
        embed = disnake.Embed(
            title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–æ–ª–æ–≤—ã–º –∫–∞–Ω–∞–ª–æ–º",
            description="–¢–£–¢ –ù–ê–°–¢–†–û–ô–ö–ò, –ù–ê–°–¢–†–ê–ò–í–ê–¢–¨ –ù–ê–î–û"
        )
        await ctx.send(embed=embed, view=VoiceView())

    @commands.Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        """"–°–æ–∑–¥–∞—Ç—å, —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª"""
        # E—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –∑–∞—à—ë–ª/–ø–µ—Ä–µ—à—ë–ª/–≤—ã—à–µ–ª.
        # before.channel = None - –∑–∞—à–µ–ª –≤ –≥—Å —Å–µ—Ä–≤–µ—Ä–∞
        # after.channel = None - –≤—ã—à–µ–ª —Å –≥—Å —Å–µ—Ä–≤–µ—Ä–∞
        if before.channel is not None and before.channel.id in custom_rooms and before.channel.voice_states == {}:
            # —É–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª
            custom_rooms.pop(before.channel.id, custom_rooms[before.channel.id])
            await before.channel.delete(reason="[–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ö–∞–Ω–∞–ª—ã] –ö–∞–Ω–∞–ª –ø—É—Å—Ç")

        if after.channel is not None and after.channel.id == voice_create_id:
            # —Å–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª
            in_cooldown = await is_cooldown(member.id)
            if in_cooldown:
                # –µ—Å–ª–∏ —é–∑–µ—Ä –≤ –∫—É–ª–¥–∞—É–Ω–¥–µ
                await after.channel.send(
                    f"{member.mention}, –ò—Å–æ–ª—å–∑—É–π—Ç–µ —á–µ—Ä–µ–∑ {await cooldown_time(member.id)} —Å–µ–∫!",
                    delete_after=15
                )
                await member.move_to(None)
            else:
                # –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–µ –≤ –∫—É–ª–¥–∞—É–Ω–¥–µ
                emoji_list = ["üëÄ", "üí≠", "‚ú®", "üåø", "üå†", "üéÜ", "üíû", "üö©", "üåà", "üçû", "üíÆ", "üé≤", "ü§ü",
                              "üåº", "üå†", "üéâ", "üéÇ", "üéÄ", "üéà", "üéÅ", "üé∂"]
                created_channel = await after.channel.guild.create_voice_channel(
                    name=f"{member.display_name} {choice(emoji_list)}",
                    reason="[–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ö–∞–Ω–∞–ª—ã] –°–æ–∑–¥–∞–Ω–∏–µ",
                    category=after.channel.category,
                    position=after.channel.position + 1,
                    overwrites={member: disnake.PermissionOverwrite(view_channel=True, manage_channels=True)}
                )

                # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª –∏ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è-—É—á–∞—Å—Ç–Ω–∏–∫–∞
                custom_rooms.update({created_channel.id: member.id, member.id: created_channel.id})

                # –ø–µ—Ä–µ–Ω–æ—Å–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –µ–≥–æ –∫–∞–Ω–∞–ª
                await sleep(2)
                await member.move_to(created_channel, reason="[C–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ö–∞–Ω–∞–ª—ã] –û–Ω —Å–æ–∑–¥–∞–ª —Å–≤–æ–π –∫–∞–Ω–∞–ª!")

                # –ø–æ–¥—Å–∫–∞–∑–∫–∞
                tip_embed = disnake.Embed(
                    title=f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ:",
                    description="‚Ä¢ –í—ã–≥–Ω–∞—Ç—å –Ω–µ–ø—Ä–∏—Ç—è–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! \n‚Ä¢ –°–¥–µ–ª–∞—Ç—å –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–º, —á—Ç–æ–±—ã –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—à—ë–ª!"
                )
                await created_channel.send(embed=tip_embed)

                # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫—É–ª–¥–∞—É–Ω
                await add_cooldown(member.id)


def setup(bot: commands.Bot) -> None:
    bot.add_cog(VoiceCog(bot))
    print(f" + {__name__}")


def teardown(bot: commands.Bot) -> None:
    print(f" ‚Äì {__name__}")
